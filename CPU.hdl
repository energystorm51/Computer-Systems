// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
  Decode (in = instruction, type = type, a = abit, c1 = c1, c2 = c2, c3 =c3, c4 = c4, c5 = c5, c6 = c6, d1 = d1, d2 = d2, d3 = d3, j1 = j1, j2 = j2, j3 = j3);

   Mux16 (a = instruction, b = ALUoutput, sel = type, out = outmux1);

   // get A-instruc/C-instruc
   Not (in = type, out = notType);
   Not (in = d1, out = notD1);
   And (a = notType, b = notD1, out = p1);
   And (a = type, b = d1, out = p2);
   Or (a = p1, b = p2, out = p3);
   And (a = notType, b = d1, out = p4);
   Or (a = p3, b = p4, out = instructionLoad);
   ARegister (in = outmux1, load = instructionLoad, out = outA, out[0..14] = addressM);

   Mux16 (a = outA, b = inM, sel = abit, out = outAM);

   // get load signal of D-register
   And (a = type, b = d2, out = Dload);
   DRegister (in = ALUoutput, load = Dload, out = outD);

   // get load signal of writeM
   And (a = type, b = d3, out = writeM);

   // handle ALU
   ALU (x = outD, y = outAM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUoutput, zr=outZR, ng=outNG, out = outM);

   // get PC output
   And (a = type, b = j2, out  = jeq);
   And (a = jeq, b = outZR, out = load1);

   And (a = type, b = j1, out = jlt);
   And (a = jlt, b = outNG, out = load2);

   And (a = type, b = j3, out = jgt);
   Not (in = outNG, out = positive);
   Not (in = outZR, out = notzero);
   And (a = positive, b = notzero, out = posnotzero);
   And (a = jgt, b = posnotzero, out = load3);

   Or (a = load1, b = load2, out = load);
   Or (a = load, b = load3, out = PCload);

   Not (in = PCload, out = PCinc);
   
   PC (in = outA, load = PCload, inc = PCinc, reset = reset, out[0..14] = pc);
}